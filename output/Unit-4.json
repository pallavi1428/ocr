{
  "1": "```markdown\n---\n*Slide 1*\n---\n\n# UNIT 4\n\n## Network Layer\n\n---\n*End of Document*\n---\n```",
  "2": "```markdown\n---\n*Slide 2*\n---\n\n# Unit Covered\n\n1. **Internetworking**\n    - Need of Network Layer\n    - Internet as datagram n/w\n    - Internet as Connectionless n/w\n\n2. **Delivery**\n    - Direct\n    - Indirect\n\n3. **Forwarding**\n    - Forwarding Techniques\n    - Forwarding Process\n    - Routing table\n\n4. **Routing protocols**\n    - Distance vector routing\n    - Link state routing\n    - Path vector routing\n```",
  "3": "```markdown\n---\n*Slide 1*\n---\n\n# Internetworking\n\n---\n*End of Document*\n---\n```",
  "5": "```markdown\n---\n*Slide 5*\n---\n\n# Internetworking\n\n- Physical and Datalink layer of a network operate locally.\n- These two layers are jointly responsible for data delivery on the network from one node to next.\n\n> *Visual Explanation:*\n> - Diagram shows the flow from node A to node D.\n> - Each node consists of Data link and Physical layers.\n> - Data is delivered hop-to-hop through nodes S1 and S3.\n```",
  "4": "```markdown\n---\n*Slide 4*\n---\n\n# Internetworking\n\n*In this section, we discuss internetworking, connecting networks together to make an internetwork or an internet.*\n\n- Topics discussed in this section:\n    - Need for Network Layer\n    - Internet as a datagram Network\n    - Internet as a Connectionless Network\n```",
  "6": "```markdown\n---\n*Slide 6*\n---\n\n# Internetwork\n\n- Internetwork made up of 5 networks:\n    - 4 LAN and 1 WAN\n- If one host A needs to send data packet to D:\n    - Packet goes 1st from A to R1 (Switch or Router)\n    - R1 to R3\n    - R3 to Host D.\n- Data packet passes through 3 links, in each 2 physical and 2 Datalink layers are involved.\n```",
  "7": "```markdown\n---\n*Slide 7*\n---\n\n# Internetworking\n\n> *Network Diagram:*\n> - Components:\n>   - Multiple LANs connected via WAN\n>   - Routers (S1, S2, S3) facilitating connections\n> - Flow:\n>   - Data flows from computer A through Link 1 to LAN\n>   - Router S1 connects to WAN via f1, f2, f3\n>   - WAN connects to other LANs through S2 and S3\n>   - Link 2 and Link 3 connect to computer D\n```",
  "9": "```markdown\n---\n*Slide 9*\n---\n\n# Need of Network Layer\n\n*To solve the problem of delivery through several link, the Network layer (internetwork layer) was designed.*\n\nThe network layer is responsible for\n\n- Host-to-host delivery\n- Routing packets through the router or switches.\n```",
  "8": "```markdown\n---\n*Slide 8*\n---\n\n# Problem with Delivery through Several Links\n\n- When data arrive at interface f1 of R1, how does R1 know that interface f3 is the outgoing interface?\n- There is no provision in the data link (or physical) layer to help R1 to make the right decision.\n- The frame does not carry any routing information.\n- Frame contains MAC address of A as a source and R1 as Destination.\n- For a LAN or MAN, delivery means carrying the frame through one link not beyond.\n```",
  "11": "```markdown\n---\n*Slide 11*\n---\n\n# Network Layer Functionality\n\n- General Functionality of network layer at a\n    - Source\n    - Router\n    - Destination\n\n---\n*End of Document*\n---\n```",
  "12": "```markdown\n---\n*Slide 12*\n---\n\n# Network Layer at Source\n\n1. Creating packet from data coming from another protocol\n    - Such as transport layer protocol or routing protocol.\n2. Header of packet contains information:\n    - Logical address of source and destination.\n3. Checking its routing table to find out routing information\n    - Such as outgoing interface of packet\n    - Physical address of next node.\n4. If packet is too large, the packet is fragmented.\n```",
  "10": "```markdown\n---\n*Slide 10*\n---\n\n# Network layer in an Internetwork\n\n> *Visual Explanation:*\n> - Diagram shows network layers: Network, Data link, Physical\n> - Flow from A to D through S1, S3\n> - Host-to-host path via WAN and LANs\n> - Components: Computers, LANs, WAN, switches (S1, S2, S3)\n> - Data flow: A → S1 → S3 → D\n> - Path: f1, f2, f3 connections\n\n---\n*End of Document*\n---\n```",
  "14": "```markdown\n---\n*Slide 14*\n---\n\n# Network Layer At Switch or Router\n\n1. Responsibility for routing a packet.\n2. When packet is arrive, router and switch consults it routing table\n    - Find interface from which the packet must be sent.\n3. After some changes in header, with routing information\n    - The packet is passed to the data link layer.\n```",
  "15": "```markdown\n---\n*Slide 15*\n---\n\n# Network Layer At Destination\n\n1. Responsible for address verification\n    - Make sure that the destination address on the packet is same as address of the Host\n2. If packet is fragmented\n    - The network layer waits until all fragments have arrived.\n    - Then reassembles them\n    - Deliver reassembled packet to transport layer.\n```",
  "16": "```markdown\n---\n*Slide 16*\n---\n\n# Network Layer At Destination\n\n> *Visual Explanation:*\n> - Diagram shows the flow of data at the network layer at the destination.\n> - Components:\n>   - IP packet received from data link layer.\n>   - Processing occurs at the network layer.\n>   - Data is then sent to another protocol.\n> - Flow direction:\n>   - From data link layer to processing.\n>   - Processing to another protocol.\n```",
  "13": "```markdown\n---\n*Slide 13*\n---\n\n# Network Layer at Source\n\n> *Process Flow:*\n> 1. Data from another protocol → Processing\n> 2. Processing → Routing table\n> 3. Routing table → IP packet and routing information\n> 4. IP packet and routing information → Network layer\n> 5. Network layer → To data link layer\n\n> *Visual Explanation:*\n> - The diagram illustrates the flow of data from the source through the network layer.\n> - Data is processed and routed using a routing table.\n> - The final output is directed to the data link layer.\n\n*Note: a. Network layer at source*\n```",
  "17": "```markdown\n---\n*Slide 17*\n---\n\n# Internet as a Datagram Network\n\n- The internet has chosen the datagram approach to switching in the network layer.\n- It uses universal addresses defined in the network to route packets from the source to destination.\n\n> *Visual Explanation:*\n> Switching at the network layer in the Internet uses the datagram approach to packet switching\n```",
  "19": "```markdown\n---\n*Slide 19*\n---\n\n# Internet as a Datagram Network\n\n- The internet, at network layer, is a packet-switched network.\n- Switching can be divided into 3 categories:\n    - Circuit Switching\n    - Packet Switching\n        - Virtual circuit\n        - Datagram\n    - Message Switching\n```",
  "18": "```markdown\n---\n*Slide 1*\n---\n\n# Datagram Approach\n\n- In a packet-switched network, there is no resource reservation; resources are allocated on demand.\n\n> *Visual Explanation:*\n> - Diagram of a datagram network\n> - Packets labeled 1 to 4 are sent from computer A to computer X\n> - Packets take different paths through the network\n> - No fixed path; packets are routed independently\n\n---\n*End of Document*\n---\n```",
  "22": "```markdown\n---\n*Slide 22*\n---\n\n# Delivery\n\n- The network layer supervises the handling of the packet by the underlying physical network.\n- We define this handling as the delivery of a packet.\n    - Direct Delivery\n    - Indirect Delivery\n```",
  "20": "```markdown\n---\n*Slide 20*\n---\n\n# Internet as a Connectionless Network\n\n- Delivery can be done by either connection oriented or connectionless network service.\n- **Connection – Oriented Service:**\n    - Source must make connection with destination before sending packet.\n    - And then sequence of packet from same source to destination one after another.\n    - Packet is logically connected with each other.\n    - When all packets of message have been delivered, the connection is terminated.\n    - Decision about route made only once, when connection is established.\n    - Switch do not recalculate route.\n```",
  "21": "```markdown\n---\n*Slide 21*\n---\n\n# Connectionless service\n\n- In this, Network layer treats each packet independently, with each packet having no relationship to any other packet.\n- Packet may not travel the same path to their destination.\n- This type of service is used in datagram approach.\n- Reason:\n    - Internet is made up of so many heterogeneous networks.\n    - Impossible to create connection from source to destination.\n\n> *Visual Explanation:*\n> Communication at the network layer in the Internet is connectionless.\n```",
  "24": "```markdown\n---\n*Slide 24*\n---\n\n# Direct Delivery\n\n> *Visual Explanation:*\n> - Diagram shows a network with two hosts.\n> - Direct delivery occurs between hosts through the network.\n> - Connection extends to the rest of the Internet.\n> - Flow direction is indicated by arrows.\n\n*Note: a. Direct delivery*\n```",
  "26": "```markdown\n---\n*Slide 26*\n---\n\n# Indirect Delivery\n\n> *Visual Explanation:*\n> - Diagram shows network communication\n> - Host (source) sends data via network\n> - Indirect delivery through a router\n> - Direct delivery to Host (destination)\n> - Flow: Source → Network → Router → Network → Destination\n\n*Note: b. Indirect and direct delivery*\n```",
  "23": "```markdown\n---\n*Slide 23*\n---\n\n# Direct Delivery\n\n- In direct delivery, the final destination of a packet is a host connected to the same physical network as the deliverer.\n\n- **Direct delivery occurs when**\n    - The source and destination of packet are located on the same physical network or\n    - Delivery is between the last router and destination host.\n\n- **The sender can easily determine if the delivery is direct.**\n    - Compare N/W address of destination and address of N/W to which it is connected.\n    - If Match is found, the delivery is Direct.\n```",
  "25": "```markdown\n---\n*Slide 25*\n---\n\n# Indirect Delivery\n\n- If the destination host is not on the same network as the deliverer, the packet is delivered indirectly.\n- In indirect Delivery:\n    - The packet goes from router to router until it reaches the one connected to the same physical network as its final destination.\n\n> *Note:*\n> Delivery always involves one direct delivery but zero or more indirect deliveries. Last delivery is always as Direct delivery.\n```",
  "28": "```markdown\n---\n*Slide 28*\n---\n\n# Forwarding Technique\n\n- Several techniques can make the size of the routing table manageable and also handle issues such as security.\n    - **Next-hop method** versus **Route Method**\n    - **Network-specific method** versus **Host-Specific Method**\n```",
  "27": "```markdown\n---\n*Slide 27*\n---\n\n# Forwarding\n\n- Forwarding means to place the packet in its route to its destination.\n- Forwarding requires a host or a router to have a routing table.\n- When a host has a packet to send or when a router has received a packet to be forwarded, it looks at this table to find the route to the final destination.\n- **Forwarding Include**:\n    - Forwarding Techniques\n    - Forwarding Process\n    - Routing Table\n```",
  "29": "```markdown\n---\n*Slide 29*\n---\n\n# Next-hop method versus Route Method\n\n- One technique to reduce the content of a routing table is called the **Next-hop-method**.\n- The routing table holds only the address of the next hop instead of information about the complete route (**route method**).\n- The entry of routing table must be consistent with one another.\n```",
  "31": "```markdown\n---\n*Slide 31*\n---\n\n# Network-specific Method versus Host-specific Method\n\n- A second technique to reduce the routing table and simplify the searching process is called the Network-specific method.\n- Here, instead of having an entry for every destination host connected to the same physical network (host-specific)\n    - **We have only one entry that defines the address of the destination network itself.**\n- We treat all hosts connected to the same network as one single entry.\n- Example:\n    - If 1000 hosts are attached to the same network, only one entry exists in the routing table.\n```",
  "33": "```markdown\n---\n*Slide 33*\n---\n\n# Default Method\n\n- Another technique to simplify routing is called **default method**.\n- Host A is connected to a network with two routers.\n- Router R1 routes the packet to hosts connected to network N2.\n- However, for the rest of the network, R2 is used.\n\n> Note: Instead of listing all networks in the entire Internet, Host A can just have one entry called Default (0.0.0.0 = network address)\n```",
  "30": "```markdown\n---\n*Slide 30*\n---\n\n# Route method versus next-hop method\n\n- Routing tables based on route:\n  - Routing table for host A:\n    - Destination: Host B\n    - Route: R1, R2, host B\n  - Routing table for R1:\n    - Destination: Host B\n    - Route: R2, host B\n  - Routing table for R2:\n    - Destination: Host B\n    - Route: Host B\n\n- Routing tables based on next hop:\n  - Routing table for host A:\n    - Destination: Host B\n    - Next hop: R1\n  - Routing table for R1:\n    - Destination: Host B\n    - Next hop: R2\n  - Routing table for R2:\n    - Destination: Host B\n    - Next hop: ---\n\n> *Visual Explanation:*\n> - Host A connects to Host B through networks R1 and R2.\n> - The diagram illustrates the flow from Host A to Host B via network routers.\n\n---\n*End of Document*\n---\n```",
  "34": "```markdown\n---\n*Slide 34*\n---\n\n# Default Method\n\n- Routing Table for Host A:\n  - Destination: N2\n    - Next hop: R1\n  - Destination: Any other\n    - Next hop: R2\n\n> *Visual Explanation:*\n> - Host A connects to network N1.\n> - Default router R2 connects to the rest of the Internet.\n> - Router R1 connects to network N2.\n> - Data flow:\n>   1. Host A → N1\n>   2. N1 → R1 or R2 based on destination\n>   3. R2 → Rest of the Internet\n```",
  "32": "```markdown\n---\n*Slide 32*\n---\n\n# Host-specific versus network-specific method\n\n- Routing table for host S based on host-specific method:\n  - Destination: A, B, C, D\n  - Next hop: R1\n\n- Routing table for host S based on network-specific method:\n  - Destination: N2\n  - Next hop: R1\n\n> *Visual Explanation:*\n> - Diagram shows two routing methods.\n> - Host-specific method directs all destinations (A, B, C, D) to R1.\n> - Network-specific method directs traffic to N2 via R1.\n> - Flow: S → N1 → R1 → N2 → A/B/C/D\n```",
  "37": "```markdown\n---\n*Slide 37*\n---\n\n# Example 22.1\n\n- Make a routing table for router R1, using the configuration in Figure 22.6.\n\n---\n*End of Document*\n---\n```",
  "35": "```markdown\n---\n*Slide 35*\n---\n\n# Forwarding Process\n\n- Host and routers use classless addressing\n    - Because classful addressing is a special case of classless addressing.\n- In classless addressing, the routing table needs to have one row of information for each block involved.\n- The table needs to be searched based on the network address.\n- Destination address in the packet gives no clue about the network address.\n- To solve the problem, we need to include the mask(/n) in the table.\n    - Extra column that includes the mask for the corresponding block.\n```",
  "38": "```markdown\n---\n*Slide 38*\n---\n\n# Configuration of Example 22.1\n\n> *Network Diagram:*\n> - Central router R1 with interfaces m0, m1, m2\n> - Connections:\n>   - m0: 180.70.65.128/25, 180.70.65.135/25\n>   - m1: 201.4.16.0/22, 201.4.16.2/22\n>   - m2: 201.4.22.0/24, 201.4.22.3/24\n> - Additional routes:\n>   - 180.70.65.192/26, 180.70.65.194/26\n>   - Connection to the rest of the Internet via 180.70.65.200/26\n```",
  "41": "```markdown\n---\n*Slide 41*\n---\n\n# Routing Table\n\n- Host and router have routing tables with entries for each destination, or combination of destinations, to route IP packets.\n- The routing table can be either\n    - Static\n    - Dynamic\n```",
  "36": "```markdown\n---\n*Slide 36*\n---\n\n# Simplified forwarding module in classless address\n\n- In classless addressing, we need at least four columns in a routing table.\n\n> *Visual Explanation:*\n> - Diagram of a forwarding module\n> - Process Flow:\n>   1. Packet → Extract destination address\n>   2. Extract destination address → Search table\n>   3. Search table → Next-hop address and interface number\n>   4. Next-hop address and interface number → To ARP\n> - Table Columns:\n>   - Mask (/n)\n>   - Network address\n>   - Next-hop address\n>   - Interface\n```",
  "39": "```markdown\n---\n*Slide 39*\n---\n\n# Solution\n\n- Table 22.1 shows the corresponding table.\n\n## Routing table for Router R1.\n\n| Mask | Network Address | Next Hop       | Interface |\n|------|-----------------|----------------|-----------|\n| /26  | 180.70.65.192   | —              | m2        |\n| /25  | 180.70.65.128   | —              | m0        |\n| /24  | 201.4.22.0      | —              | m3        |\n| /22  | 201.4.16.0      | ....           | m1        |\n| Any  | Any             | 180.70.65.200  | m2        |\n\n---\n*End of Document*\n---\n```",
  "40": "```markdown\n---\n*Slide 40*\n---\n\n# Example 22.2\n\n_Show the forwarding process if a packet arrives at R1 in Figure 22.6 with the destination address 180.70.65.140._\n\n**Solution**\n\n- The router performs the following steps:\n    1. The first mask (/26) is applied to the destination address. The result is 180.70.65.192, which does not match the corresponding network address.\n    2. The second mask (/25) is applied to the destination address. The result is 180.70.65.128, which matches the corresponding network address. **The next-hop address** and the interface number m0 are passed to ARP for further processing.\n```",
  "42": "```markdown\n---\n*Slide 42*\n---\n\n# Static\n\n- Static routing table contains information entered manually.\n- The administrator enters the route for each destination into routing table.\n- When table is created, it cannot update automatically when there is change in Internet.\n- The table must be manually altered.\n- It can be used in small internet that does not change.\n- It is poor strategy to use a static routing table in a big internet as the Internet.\n```",
  "43": "```markdown\n---\n*Slide 43*\n---\n\n# Dynamic Routing Table\n\n- It is updated periodically by using one of the dynamic routing protocols.\n- Whenever there is a change in the Internet, it updates all the tables in the router or host automatically.\n- Routers in the Internet need to be updated dynamically for efficient delivery of IP packets.\n```",
  "47": "```markdown\n---\n*Slide 47*\n---\n\n# Optimization\n\n- When router receives a packet, to which network should it pass the packet?\n- The decision is based on optimization:\n    - Which of the available pathways is the optimal pathway?\n    - Optimality depends on various factors:\n        - Cost metrics (RIP)\n        - Shortest path (OSPF)\n        - Policy (BGP)\n```",
  "44": "```markdown\n---\n*Slide 44*\n---\n\n# Format of Routing Table\n\n| Mask      | Network address | Next-hop address | Interface | Flags | Reference count | Use |\n|-----------|-----------------|------------------|-----------|-------|-----------------|-----|\n| ..........| .................| ..................| ...........| .......| ..................| .......|\n\n- **Mask**: Mask apply for entry.\n- **Network Address**: Network address to which the packet is finally delivered.\n- **Next-Hop-Address**: Address of next hop router to which the packet is delivered.\n- **Interface**: Name of the interface.\n```",
  "45": "```markdown\n---\n*Slide 45*\n---\n\n# Intra and Interdomain Routing\n\n- **Autonomous System**:\n    - Group of network and router under the authority of single administrator.\n- **Intradomain Routing**:\n    - Routing inside autonomous system.\n- **Interdomain Routing**:\n    - Routing between autonomous system.\n\n> *Visual Explanation:*\n> - Diagram shows multiple autonomous systems.\n> - R1, R2, R3, R4 represent routers connecting different systems.\n> - Solid lines indicate intradomain connections.\n> - Dashed lines indicate interdomain connections.\n```",
  "49": "```markdown\n---\n*Slide 49*\n---\n\n# Optimization Protocol\n\n- **OSPF: Open Shortest Path First**\n    - Assign cost based on types of service required.\n    - Example: Link state protocol.\n\n- **BGP: Border Gateway Protocol**\n    - It is based on policy set by administrator.\n    - Policy defines what paths should be chosen.\n    - Example: Path vector protocol.\n```",
  "46": "```markdown\n---\n*Slide [N]*\n---\n\n# Cont...\n\nA routing protocol is a combination of rules and procedures that lets routers in the Internet inform each other for changes.\n\n> *Visual Explanation:*\n> - **Routing protocols**\n>   - **Intradomain**\n>     - Distance vector (e.g., RIP)\n>     - Link state (e.g., OSPF)\n>   - **Interdomain**\n>     - Path vector (e.g., BGP)\n\n---\n*End of Document*\n---\n```",
  "48": "```markdown\n---\n*Slide 48*\n---\n\n# Optimization Protocol\n\n- **RIP: Routing information protocol**\n    - Treat all networks as equal and the cost of passing through the network is the same.\n    - It is an intradomain routing protocol used inside an autonomous system.\n    - RIP uses **Hop Count metrics**.\n        - The number of links to reach each destination is called hop count.\n```",
  "50": "```markdown\n---\n*Slide 50*\n---\n\n# Distance Vector Routing\n\n- The least cost route between any two nodes is the route with minimum distance.\n- In this protocol, as the name implies, each node maintains a vector (table) of minimum distance to every node.\n- The table at each node also guides the packet to the desired node by showing the next stop in the route.\n```",
  "54": "```markdown\n---\n*Slide 54*\n---\n\n# Distance Vector Routing\n\n> Note: In distance vector routing, each node shares its routing table with its immediate neighbors periodically and when there is a change.\n```",
  "52": "```markdown\n---\n*Slide 52*\n---\n\n# Dynamic Routing Table\n\n- The tables (Vectors) are stable.\n- Each node knows how to reach any other node and the cost.\n- 3 steps for dynamic routing table:\n    - **Initialization**\n        - Each node can know only the distance between itself and its immediate neighbor.\n        - The distance for any entry that is not a neighbor is marked as infinite.\n    - **Sharing**\n        - Sharing of information between neighbors.\n    - **Updating**\n        - When a node receives a two-column routing table from a neighbor, it needs its routing table.\n```",
  "56": "```markdown\n---\n*Slide 56*\n---\n\n# When to share\n\n- When node share its routing table to other?\n    - Periodic Update\n        - Sends its routing table, normally every 30 seconds.\n    - Triggered Update\n        - Node sends its two column routing table to its neighbor when there is change in routing table.\n```",
  "57": "```markdown\n---\n*Slide 57*\n---\n\n# Link State Routing\n\n- It has different philosophy than distance vector routing.\n- In link state routing\n    - If each node in the domains has entire topology of domain (list of node and links), how they are connected including the type, cost and condition (UP or Down).\n    - Node can use Dijkstra’s algorithm to build routing table.\n\n*Note: A group of computers and devices on a network that are administered as a unit with common rules and procedures. Within the Internet, all devices sharing a common part of the IP address are said to be in the same domain.*\n```",
  "58": "```markdown\n---\n*Slide 58*\n---\n\n# Concept of Link State Routing\n\n> *Visual Explanation:*\n> - Central diagram shows a network with nodes A, B, C, D, E.\n> - Connections between nodes have weights: A-B (5), A-C (2), A-D (3), B-C (4), B-E (3), C-E (4).\n> - Smaller diagrams illustrate individual node perspectives with routing tables.\n> - Flow direction indicated by arrows from network diagrams to routing tables.\n\n---\n*End of Document*\n---\n```",
  "55": "```markdown\n---\n*Slide 55*\n---\n\n# Updating in Distance Vector Routing\n\n> *Process Flow:*\n> 1. Received from C:\n>    - | To | Cost |\n>    - |----|------|\n>    - | A  | 2    |\n>    - | B  | 4    |\n>    - | C  | 0    |\n>    - | D  | ∞    |\n>    - | E  | 4    |\n> 2. A's modified table:\n>    - | To | Cost | Next |\n>    - |----|------|------|\n>    - | A  | 4    | C    |\n>    - | B  | 6    | C    |\n>    - | C  | 2    | C    |\n>    - | D  | ∞    | C    |\n>    - | E  | 6    | C    |\n> 3. Compare with A's old table:\n>    - | To | Cost | Next |\n>    - |----|------|------|\n>    - | A  | 0    | —    |\n>    - | B  | 5    | —    |\n>    - | C  | 2    | —    |\n>    - | D  | 3    | —    |\n>    - | E  | ∞    | —    |\n> 4. A's new table:\n>    - | To | Cost | Next |\n>    - |----|------|------|\n>    - | A  | 0    | —    |\n>    - | B  | 5    | —    |\n>    - | C  | 2    | —    |\n>    - | D  | 3    | —    |\n>    - | E  | 6    | C    |\n```",
  "53": "```markdown\n---\n*Slide 53*\n---\n\n# Initialization of tables in distance vector routing\n\n> *Visual Explanation:*\n> - Diagram of network nodes A, B, C, D, E\n> - Connections with costs: A-B (5), A-C (2), A-D (3), B-C (4), B-E (3), C-E (4)\n> - Each node has a table showing initial costs to other nodes:\n>   - **A's table**:\n>     | To | Cost | Next |\n>     |----|------|------|\n>     | A  | 0    | —    |\n>     | B  | 5    | —    |\n>     | C  | 2    | —    |\n>     | D  | 3    | —    |\n>     | E  | ∞    | —    |\n>   - **B's table**:\n>     | To | Cost | Next |\n>     |----|------|------|\n>     | A  | 5    | —    |\n>     | B  | 0    | —    |\n>     | C  | 4    | —    |\n>     | D  | ∞    | —    |\n>     | E  | 3    | —    |\n>   - **C's table**:\n>     | To | Cost | Next |\n>     |----|------|------|\n>     | A  | 2    | —    |\n>     | B  | 4    | —    |\n>     | C  | 0    | —    |\n>     | D  | ∞    | —    |\n>     | E  | 4    | —    |\n>   - **D's table**:\n>     | To | Cost | Next |\n>     |----|------|------|\n>     | A  | 3    | —    |\n>     | B  | ∞    | —    |\n>     | C  | ∞    | —    |\n>     | D  | 0    | —    |\n>     | E  | ∞    | —    |\n>   - **E's table**:\n>     | To | Cost | Next |\n>     |----|------|------|\n>     | A  | ∞    | —    |\n>     | B  | 3    | B    |\n>     | C  | 4    | C    |\n>     | D  | ∞    | —    |\n>     | E  | 0    | D    |\n```",
  "59": "```markdown\n---\n*Slide 59*\n---\n\n# Routing Table and Topology\n\n- Each node uses the same topology to create a routing table.\n- But routing table for each node is unique.\n    - Because the calculation is based on different interpretation of topology.\n- It is similar to a city map in which each person may have the same map.\n    - Each needs to take a different route to reach their specific destination.\n- Topology must be dynamic.\n    - Representing the latest state of each node and each link.\n    - If there are changes in any point in the network, topology must be updated for each node.\n```",
  "60": "```markdown\n---\n*Slide 60*\n---\n\n# Link state knowledge\n\n- Whole topology can be compiled from the partial knowledge of each node.\n  Figure indicating part of knowledge belonging to each node.\n\n> *Visual Explanation:*\n> - Diagram shows nodes A, B, C, D, and E with their respective states of links.\n> - Node A is connected to nodes B, C, and D.\n> - Node B is connected to nodes A, C, and E.\n> - Node C is connected to nodes A, B, and E.\n> - Node D is connected to node A.\n> - Node E is connected to nodes B and C.\n> - Link weights are indicated on the connections between nodes.\n```",
  "51": "```markdown\n---\n*Slide 51*\n---\n\n# Distance Vector Routing Table\n\n> *Visual Explanation:*\n> - Diagram shows a network with nodes A, B, C, D, and E.\n> - Each node has a routing table indicating the cost to reach other nodes and the next hop.\n> - Connections between nodes have specific costs:\n>   - A to B: 5\n>   - A to C: 2\n>   - B to C: 4\n>   - B to E: 3\n>   - C to D: 3\n>   - C to E: 4\n> - Routing tables:\n>   - **A's table**:\n>     | To | Cost | Next |\n>     |----|------|------|\n>     | A  | 0    | —    |\n>     | B  | 5    | —    |\n>     | C  | 2    | —    |\n>     | D  | 3    | —    |\n>     | E  | 6    | C    |\n>   - **B's table**:\n>     | To | Cost | Next |\n>     |----|------|------|\n>     | A  | 5    | —    |\n>     | B  | 0    | —    |\n>     | C  | 4    | —    |\n>     | D  | 8    | A    |\n>     | E  | 3    | —    |\n>   - **C's table**:\n>     | To | Cost | Next |\n>     |----|------|------|\n>     | A  | 2    | —    |\n>     | B  | 4    | —    |\n>     | C  | 0    | —    |\n>     | D  | 5    | A    |\n>     | E  | 4    | —    |\n>   - **D's table**:\n>     | To | Cost | Next |\n>     |----|------|------|\n>     | A  | 3    | —    |\n>     | B  | 8    | A    |\n>     | C  | 5    | A    |\n>     | D  | 0    | —    |\n>     | E  | 9    | A    |\n>   - **E's table**:\n>     | To | Cost | Next |\n>     |----|------|------|\n>     | A  | 6    | C    |\n>     | B  | 3    | —    |\n>     | C  | 4    | —    |\n>     | D  | 9    | C    |\n>     | E  | 0    | —    |\n```",
  "61": "```markdown\n---\n*Slide 61*\n---\n\n# Building Routing Table\n\n1. Creation of state of links by each node – **link state packet (LSP)**\n2. Dissemination of LSPs to every other router, called flooding.\n3. Formulation of a shortest path tree for each node.\n4. Calculation of routing table based on the shortest path tree.\n```",
  "63": "```markdown\n---\n*Slide 63*\n---\n\n# Step 2\n\n- **Flooding of LSPs**\n    - After a node has prepared an LSP, it must be disseminated to all other nodes. This process is called flooding.\n    - Flooding based on the following:\n        - Creating node sends a copy of LSP out of each interface.\n        - Receiving node compares LSP with the copy they already have.\n            - If old one, then discard LSP.\n            - If newer, discard old LSP and keep new one.\n                - Sends copy to each interface except the one from which the packet has arrived.\n```",
  "62": "```markdown\n---\n*Slide 62*\n---\n\n# Step 1\n\n- **Creation of Link State Packet (LSP)**\n    - It carries a minimum amount of data like:\n        - Node Identity and List of links: To make the topology.\n        - Sequence Number: Facilitates flooding and distinguishes new LSP from old ones.\n        - Age: Prevents old LSP from remaining in the domain for a long time.\n    - **LSP Generated on 2 occasions**\n        - When there is a change in the topology of the domain.\n        - On the Periodic Update (60 min or 2 h).\n```",
  "64": "```markdown\n---\n*Slide 64*\n---\n\n# Step 3\n\n- **Formulation of Shortest Path**\n    - Tree is a graph of nodes and links: one node is called Root.\n    - Dijkstra algorithm creates shortest path.\n    - It divides node into 2 parts.\n        - Permanent\n        - Tentative\n    - It finds the neighbor of current node, makes them tentative, examines them and if they pass the criteria, makes them permanent.\n```",
  "67": "```markdown\n---\n*Slide 67*\n---\n\n# Routing Table for node A\n\n| Node | Cost | Next Router |\n|------|------|-------------|\n| A    | 0    | —           |\n| B    | 5    | —           |\n| C    | 2    | —           |\n| D    | 3    | —           |\n| E    | 6    | C           |\n\n---\n*End of Document*\n---\n```",
  "66": "```markdown\n---\n*Slide 66*\n---\n\n# Tracing\n\n| Permanent List                        | Tentative List               |\n|---------------------------------------|------------------------------|\n| Permanent list: empty                 | Tentative List A(0)          |\n| Permanent list: A(0)                  | Tentative List B(5), C(2), D(3) |\n| Permanent list: A(0), C(2)            | Tentative List B(5), D(3), E(6) |\n| Permanent list: A(0), C(2), D(3)      | Tentative List B(5), E(6)    |\n| Permanent list: A(0), B(5), C(2), D(3)| Tentative List E(6)          |\n| Permanent list: A(0), B(5), C(2), D(3), E(6) | Tentative List Empty     |\n\n---\n*End of Document*\n---\n```",
  "65": "```markdown\n---\n*Slide 1*\n---\n\n# Example of Formulation of Shortest Path Tree\n\n- Topology Diagram:\n  - Nodes: A, B, C, D, E\n  - Edges with weights: \n    - A to B: 5\n    - A to C: 3\n    - C to B: 2\n    - C to E: 4\n    - D to C: 3\n    - D to E: 4\n\n> *Process Flow:*\n> 1. Set root to A and move A to tentative list.\n> 2. Move A to permanent list and add B, C, and D to tentative list.\n> 3. Move C to permanent and add E to tentative list.\n> 4. Move D to permanent list.\n> 5. Move B to permanent list.\n> 6. Move E to permanent list (tentative list is empty).\n\n---\n*End of Document*\n---\n```",
  "68": "```markdown\n---\n*Slide 68*\n---\n\n# OSPF\n\n- Intradomain routing protocol.\n- Its Domain is also autonomous.\n- To handle routing efficiently and timely manner.\n    - OSPF divides the system into areas.\n- Area is a collection of network, host, and router all contained within an autonomous system.\n- Router inside an area floods the area with routing information.\n- At the border of an area, a special router called **area border router**.\n    - It summarizes the information about the area and sends it to another area.\n```",
  "70": "```markdown\n---\n*Slide 70*\n---\n\n# Path Vector Routing\n\n- Distance vector and link state routing are both Intradomain routing protocols.\n    - They can be used inside an autonomous system, but not between autonomous systems.\n- **Path vector routing** is useful for Interdomain routing.\n\n> *Principle: We assume that there is one node in each autonomous system that acts on behalf of the entire autonomous system. That node is called a Speaker Node.*\n```",
  "71": "```markdown\n---\n*Slide 71*\n---\n\n# Speaker Node in AS\n\n- Speaker node in an AS creates the routing table and advertises it to speaker node in neighboring ASs.\n- Idea is same as distance vector\n    - But only speaker node in each AS can communicate with each other.\n    - Speaker node advertises the path, not the metric of each node.\n- Three steps to follow\n    - Initialization\n    - Sharing\n    - Updating\n```",
  "72": "```markdown\n---\n*Slide 72*\n---\n\n# Initialization\n\n- At the beginning, each node can know only the reachability of nodes inside its autonomous system.\n- Initial table for each speaker node.\n- Node A1 is a speaker of AS1, B1 for AS2, C1 for AS3, and D1 for AS4.\n- Node A1 creates an initial table that shows A1 to A5 are located in AS1 and can be reached through it. And so on.\n```",
  "69": "```markdown\n---\n*Slide 69*\n---\n\n# Areas in an autonomous system\n\n> *Visual Explanation:*\n> - **Diagram Overview**:\n>   - **Area 1**: Contains multiple networks connected through an area border router.\n>   - **Area 2**: Similar structure with networks linked to an area border router.\n>   - **Area 0 (Backbone)**: Central backbone router connecting to other areas.\n>   - **AS Boundary Router**: Connects the autonomous system to other ASs.\n> - **Flow**:\n>   - Networks (net) are interconnected within areas.\n>   - Backbone router facilitates communication between areas.\n>   - AS boundary router links to external autonomous systems.\n```",
  "74": "```markdown\n---\n*Slide 74*\n---\n\n# Sharing\n\n- Speaker in an Autonomous system shares its table with immediate neighbors.\n    - A1 shares its table with node B1 and C1.\n    - C1 shares its table with node D1, B1, A1.\n    - B1 shares its table with node C1 and A1.\n    - D1 shares its table with C1.\n```",
  "77": "```markdown\n---\n*Slide 77*\n---\n\n# Loop Preservation\n\n- Instability of distance vector routing and creation of loop can be avoided in path vector routing.\n- When router receives a message, it checks to see if its autonomous system is in the path to its destination.\n- If it is, looping is involved and message is ignored.\n```",
  "73": "```markdown\n---\n*Slide 73*\n---\n\n# Initial routing table in path vector routing\n\n- **A1 Table:**\n  - Dest. Path\n    - A1 AS1\n    - A2 AS1\n    - A3 AS1\n    - A4 AS1\n    - A5 AS1\n\n- **C1 Table:**\n  - Dest. Path\n    - C1 AS3\n    - C2 AS3\n    - C3 AS3\n\n- **B1 Table:**\n  - Dest. Path\n    - B1 AS2\n    - B2 AS2\n    - B3 AS2\n    - B4 AS2\n\n- **D1 Table:**\n  - Dest. Path\n    - D1 AS4\n    - D2 AS4\n    - D3 AS4\n    - D4 AS4\n\n> *Visual Explanation:*\n> - Diagram shows network topology with Autonomous Systems (AS) 1, 2, 3, and 4.\n> - Nodes A1, B1, C1, and D1 represent routers within each AS.\n> - Solid lines indicate direct connections between routers.\n> - Dashed lines within AS blocks show internal routing paths.\n```",
  "78": "```markdown\n---\n*Slide 78*\n---\n\n# Policy Routing\n\n- Policy routing can be easily implemented through path vector routing.\n- When a router receives a message, it can check the path.\n- If one of the AS listed in the path is against its policy, it can ignore that path and that destination.\n- It does not update its routing table with this path, and it does not send this message to its neighbor.\n```",
  "75": "```markdown\n---\n*Slide 75*\n---\n\n# Updating\n\n- When speaker receives 2-column table from neighbor, it updates its own table by adding the nodes that are not in a routing table.\n    - Adding its own AS and AS that sent the system.\n- That table gives information about how to reach each node in other AS.\n\n- **Example:**\n    - If node A1 receives a packet for D1, it knows that packet should go from AS1 to AS2 and then AS4.\n    - D1 receives packet for Node A2, it knows it should go through AS4 to AS3 and AS1.\n```",
  "79": "```markdown\n---\n*Slide 79*\n---\n\n# Optimal Path\n\n- What is optimal path in path vector routing?\n    - Looking for best path\n- It is based on different criteria.\n    - RIP uses hop count metric.\n    - OSPF uses minimum delay as the metric.\n- In previous organization each AS may have more than one path to a destination.\n    - Path from AS1 to AS4 can be AS4-AS3-AS3-AS1, AS4-AS3-AS1.\n    - Choose the one that had the smaller number of AS.\n    - Other criteria: security, safety, and reliability.\n```",
  "81": "```markdown\n---\n*Slide 81*\n---\n\n# Internal and external BGP sessions\n\n> *Visual Explanation:*\n> - Diagram shows two Autonomous Systems (AS 1 and AS 2).\n> - AS 1 contains nodes A1, A2, A3, A4, A5.\n> - AS 2 contains nodes B1, B2, B3, B4.\n> - Solid line represents E-BGP session between A1 and B1.\n> - Dashed lines represent I-BGP sessions within each AS.\n\n---\n*End of Document*\n---\n```",
  "80": "```markdown\n---\n*Slide 80*\n---\n\n# BGP\n\n- Border Gateway Protocol is an Intradomain routing protocol.\n- Types of AS: AS is divided into 3 categories.\n    - **Stub AS:**\n        - Has only one connection to another AS.\n        - Data traffic cannot pass through a stub AS.\n    - **Multihomed AS:**\n        - Has more than one connection to other AS.\n        - It can send data traffic to more than one AS, but there is no temporary traffic.\n    - **Transit AS:**\n        - A transit AS is a Multihomed AS that also allows transient traffic.\n```",
  "76": "```markdown\n---\n*Slide 76*\n---\n\n# Stabilized tables for three autonomous systems\n\n| Dest. | Path     |       | Dest. | Path     |       | Dest. | Path     |\n|-------|----------|-------|-------|----------|-------|-------|----------|\n| A1    | AS1      |       | A1    | AS2-AS1  |       | A1    | AS4-AS3-AS1 |\n| ...   |          |       | ...   |          |       | ...   |          |\n| A5    | AS1      |       | A5    | AS2-AS1  |       | A5    | AS4-AS3-AS1 |\n| B1    | AS1-AS2  |       | B1    | AS1-AS2  |       | B1    | AS4-AS3-AS2 |\n| ...   | AS1-AS2  |       | ...   | AS2      |       | ...   | AS4-AS3-AS2 |\n| B4    | AS1-AS2  |       | B4    | AS2      |       | B4    | AS4-AS3-AS2 |\n| C1    | AS1-AS3  |       | C1    | AS2-AS3  |       | C1    | AS4-AS3    |\n| ...   | AS1-AS3  |       | ...   | AS2-AS3  |       | ...   | AS4-AS3    |\n| C3    | AS1-AS3  |       | C3    | AS2-AS3  |       | C3    | AS4-AS3    |\n| D1    | AS1-AS2-AS4 |    | D1    | AS2-AS3-AS4 |    | D1    | AS4       |\n| ...   | AS1-AS2-AS4 |    | ...   | AS2-AS3-AS4 |    | ...   | AS4       |\n| D4    | AS1-AS2-AS4 |    | D4    | AS2-AS3-AS4 |    | D4    | AS4       |\n\n- A1 Table\n- B1 Table\n- C1 Table\n- D1 Table\n```"
}