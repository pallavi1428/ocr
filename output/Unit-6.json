{
  "1": "```markdown\n---\n*Slide 1*\n---\n\n# Unit 6: Application Layer\n```",
  "2": "```markdown\n---\n*Slide 1*\n---\n\n# DNS (Domain Name Space)\n\n- Client/server programs divided in two categories\n    - Directly used by user (email)\n    - DNS is supported program that used by the other programs like email\n```",
  "5": "```markdown\n---\n*Slide 1*\n---\n\n# Name Space\n\n- To be unambiguous, the name must be unique because the addresses are unique.\n- **Mapping name with address can be done using two ways**:\n    - Flat Name Space\n    - Hierarchical Name Space\n\n## FLAT NAME SPACE\n- A name is assigned to an address\n- Disadvantage\n    - It cannot be used in a large system such as the Internet because it must be centrally controlled to avoid ambiguity and duplication.\n```",
  "3": "```markdown\n---\n*Slide 1*\n---\n\n# Using the DNS service\n\n- SMTP: Simple Mail Transfer Protocol (e-mail)\n- DNS: Domain Name System\n\n> *Process Flow:*\n> 1. User sends email to aperson@wonderful.com\n> 2. SMTP client queries DNS client for wonderful.com\n> 3. DNS client resolves to IP 200.200.200.5\n> 4. SMTP client communicates with DNS client using resolved IP\n\n- Application layer: SMTP client\n- Transport layer: IP 200.200.200.5\n```",
  "6": "```markdown\n---\n*Slide 1*\n---\n\n# Hierarchical Name Space\n\n- Name is made of several parts\n    - First part defines Nature of the organization, second part defines Name of an organization, third part defines Departments in the organization, and so on.\n\n- Example:\n    - Two colleges and one company call one computer *Challenger*\n    - 1st college name vnsgu.edu\n    - 2nd college name bmiit.edu\n    - Company given name smart.com\n        - challenger.vnsgu.edu\n        - challenger.bmiit.edu\n        - challenger.smart.com\n```",
  "4": "```markdown\n---\n*Slide [N]*\n---\n\n# Cont...\n\n- Example of how a DNS client/server program can support an e-mail program to find the IP address of an e-mail recipient.\n- A user of an e-mail program may know the e-mail address of the recipient; however, the IP protocol needs the IP address.\n- The DNS client program sends a request to a DNS server to map the e-mail address to the corresponding IP address.\n- To identify an entity, TCP/IP protocols use the IP address. However, people prefer to use names instead of numeric addresses. Therefore, we need a system that can map a name to an address or an address to a name.\n- Solutions:\n    - Host file (name and address) on each host\n    - Host file in single computer and allow to access centralized information to every computer that needs to mapping.\n    - Divide this huge amount of information into smaller parts and store each part on a different computer.\n        - Host that needs mapping can contact the closest computer holding the needed information. (Method used by DNS)\n```",
  "9": "```markdown\n---\n*Slide 1*\n---\n\n# Domain Name Structure\n\n- Hierarchical Components:\n    - Root\n    - edu\n    - fhda\n    - atc\n    - challenger\n\n> *Domain Explanation:*\n> 1. Root → edu\n> 2. edu → fhda.edu. (Domain name)\n> 3. fhda → atc.fhda.edu. (Domain name)\n> 4. atc → challenger.atc.fhda.edu. (Domain name)\n\n> *Visual Explanation:*\n> - Labels indicate hierarchy\n> - Arrows show direction from root to specific domain names\n> - Each level adds specificity to the domain\n\n---\n*End of Document*\n---\n```",
  "7": "```markdown\n---\n*Slide 1*\n---\n\n# DOMAIN NAME SPACE\n\n- To have a hierarchical name space, a domain name space was designed. In this design, the names are defined in an inverted-tree structure with the root at the top. The tree can have only 128 levels: level 0 (root) to level 127.\n\n> *Visual Explanation:*\n> - Diagram of an inverted-tree structure\n> - Root at the top branching into various domains such as arpa, com, edu, org, ad, zw\n> - Each branch further divides into subdomains\n```",
  "10": "```markdown\n---\n*Slide 1*\n---\n\n# Domain\n\n- A domain is a subtree of the domain name space\n    - The name of the domain is the domain name of the node at the top of the subtree.\n    - Domain may itself divide into domains (subdomains as they are sometimes called).\n\n> *Visual Explanation:*\n> - Diagram shows hierarchical structure of domains and subdomains.\n> - Arrows indicate the division into subdomains.\n> - Example domains: .com, .edu\n\n---\n*End of Document*\n---\n```",
  "14": "```markdown\n---\n*Slide 1*\n---\n\n# DNS IN THE INTERNET\n\n- **Generic Domains**\n  - The generic domains define registered hosts according to their generic behaviour.\n- **Country Domains**\n  - The country domains section uses two-character country abbreviations.\n- **Inverse Domain**\n  - The inverse domain is used to map an address to a name.\n```",
  "8": "```markdown\n---\n*Slide [N]*\n---\n\n# Cont...\n\n- **Label**\n    - Each node in the tree has a label, which is a string with a maximum of 63 characters. The root label is a null string. DNS requires that children of a node have different labels, which guarantees the uniqueness of the domain names.\n\n- **Domain Name**\n    - Each node in the tree has a domain name. A full domain name is a sequence of labels separated by dots (.). The domain names are always read from the node up to the root.\n    - The last label is the label of the root (null). This means that a full domain name always ends in a null label, which means the last character is a dot because the null string is nothing.\n\n- **Fully Qualified Domain Name**\n    - If a label is terminated by a null string, it is called a fully qualified domain name (FQDN).\n    - An FQDN is a domain name that contains the full name of a host. It contains all labels, from the most specific to the most general, that uniquely define the name of the host.\n\n- **Partially Qualified Domain Name**\n    - If a label is not terminated by a null string, it is called a partially qualified domain name (PQDN).\n    - A PQDN starts from a node, but it does not reach the root.\n    - It is used when the name to be resolved belongs to the same site as the client.\n```",
  "12": "```markdown\n---\n*Slide [N]*\n---\n\n# Cont...\n\n- Complete domain name hierarchy cannot be stored on a single server, it is divided among many servers. What a server is responsible for or has authority over is called a zone.\n- If a server accepts responsibility for a domain and does not divide the domain into smaller domains, the *domain* and the *zone* refer to the same thing.\n\n> *Visual Explanation:*\n> - Diagram shows hierarchical structure\n> - Root at the top, branching into zones and domains\n> - Flow from root to domain and zone\n```",
  "11": "```markdown\n---\n*Slide 1*\n---\n\n# DISTRIBUTION OF NAME SPACE\n\n- The information contained in the domain name space must be stored. However, it is very inefficient and also unreliable to have just one computer store such a huge amount of information.\n\n> *Visual Explanation:*\n> - Diagram of a hierarchical structure\n> - Root server at the top\n> - Branches to arpa server, edu server, com server, us server\n> - Further branches to specific domains like fhda.edu, bk.edu, mcgraw.com, irwin.com\n> - Flow is top-down from root to specific domains\n```",
  "13": "```markdown\n---\n*Slide 1*\n---\n\n# Primary and Secondary Servers\n\n- A primary server is a server that stores a file about the zone for which it is an authority.\n- A secondary server is a server that transfers the complete information about a zone from another server (primary or secondary).\n- A primary server loads all information from the disk file; the secondary server loads all information from the primary server. When the secondary downloads information from the primary, it is called zone transfer.\n```",
  "16": "```markdown\n---\n*Slide 1*\n---\n\n# Generic Domain\n\n> *Visual Explanation:*\n> - Diagram of domain hierarchy\n> - Root level connects to various top-level domains (e.g., aero, biz, com)\n> - Specific path highlighted: edu → fhda → atc → chal\n> - Final address: chal.atc.fhda.edu\n> - Flow direction: top to bottom\n\n*Generic domains*\n```",
  "15": "```markdown\n---\n*Slide 1*\n---\n\n# Domain Hierarchy\n\n> *Visual Explanation:*\n> - Diagram shows a hierarchical structure.\n> - Root node at the top connects to three main categories:\n>   1. Inverse domain\n>   2. Generic domains\n>   3. Country domains\n> - Each category contains sub-nodes.\n> - Flow is top-down from the root to sub-nodes.\n\n---\n*End of Document*\n---\n```",
  "20": "```markdown\n---\n*Slide 1*\n---\n\n# RESOLUTION\n\n- Mapping a name to an address or an address to a name is called name-address resolution.\n\n---\n*End of Document*\n---\n```",
  "17": "```markdown\n---\n*Slide 1*\n---\n\n# Generic Domain Labels\n\n| Label   | Description                                      |\n|---------|--------------------------------------------------|\n| aero    | Airlines and aerospace companies                 |\n| biz     | Businesses or firms (similar to “com”)           |\n| com     | Commercial organizations                         |\n| coop    | Cooperative business organizations               |\n| edu     | Educational institutions                         |\n| gov     | Government institutions                          |\n| info    | Information service providers                    |\n| int     | International organizations                      |\n| mil     | Military groups                                  |\n| museum  | Museums and other nonprofit organizations        |\n| name    | Personal names (individuals)                     |\n| net     | Network support centers                          |\n| org     | Nonprofit organizations                          |\n| pro     | Professional individual organizations            |\n\n---\n*End of Document*\n---\n```",
  "18": "```markdown\n---\n*Slide 1*\n---\n\n# Country Domain\n\n> *Visual Explanation:*\n> - Root level connects to various country codes (e.g., ae, fr, us, zw).\n> - Hierarchical structure:\n>   - \"us\" leads to \"ca\", then \"cup\", and finally \"anza\".\n> - Example domain: `anza.cup.ca.us`\n> - Represents index to addresses within country domains.\n\n---\n*End of Document*\n---\n```",
  "19": "```markdown\n---\n*Slide 1*\n---\n\n# Inverse domain\n\n> *Visual Explanation:*\n> - Diagram of inverse domain hierarchy\n> - Root level at the top\n> - Hierarchical structure:\n>   - arpa\n>   - in-addr\n>   - 132\n>   - 34\n>   - 45\n>   - 121\n> - Final node: 121.45.34.132.in-addr.arpa\n> - Represents index to names\n```",
  "21": "```markdown\n---\n*Slide 1*\n---\n\n# HTTP\n\n- *The Hypertext Transfer Protocol (HTTP) is a protocol used mainly to access data on the World Wide Web. HTTP functions as a combination of FTP and SMTP.*\n- **HTTP uses the services of TCP on well-known port 80.**\n\n> *Visual Explanation:*\n> - Diagram shows a client-server interaction.\n> - Request and response flow from client to server and back.\n\n---\n*End of Document*\n---\n```",
  "22": "```markdown\n---\n*Slide 1*\n---\n\n# Methods\n\n| Method  | Action                                                                 |\n|---------|------------------------------------------------------------------------|\n| GET     | Requests a document from the server                                    |\n| HEAD    | Requests information about a document but not the document itself      |\n| POST    | Sends some information from the client to the server                   |\n| PUT     | Sends a document from the server to the client                         |\n| TRACE   | Echoes the incoming request                                            |\n| CONNECT | Reserved                                                               |\n| OPTION  | Inquires about available options                                       |\n\n---\n*End of Document*\n---\n```",
  "23": "```markdown\n---\n*Slide 1*\n---\n\n# Status Codes\n\n| Code | Phrase     | Description                                                                 |\n|------|------------|-----------------------------------------------------------------------------|\n| 100  | Continue   | The initial part of the request has been received, and the client may continue with its request. |\n| 101  | Switching  | The server is complying with a client request to switch protocols defined in the upgrade header. |\n| 200  | OK         | The request is successful.                                                   |\n| 201  | Created    | A new URL is created.                                                        |\n| 202  | Accepted   | The request is accepted, but it is not immediately acted upon.               |\n| 204  | No content | There is no content in the body.                                             |\n\n---\n*End of Document*\n---\n```",
  "25": "```markdown\n---\n*Slide 1*\n---\n\n# REMOTE LOGGING\n\n- *It would be impossible to write a specific client/server program for each demand. The better solution is a general-purpose client/server program that lets a user access any application program on a remote computer.*\n- **TELNET is a general-purpose client/server application program.**\n\n---\n*End of Document*\n---\n```",
  "26": "```markdown\n---\n*Slide 1*\n---\n\n# Local and Remote Login\n\n> *Visual Explanation:*\n> - **Diagram a: Local log-in**\n>   - Terminal connects directly to the operating system.\n>   - Terminal driver interfaces with application programs.\n> - **Diagram b: Remote log-in**\n>   - Terminal connects via TELNET client over the Internet.\n>   - TELNET server interfaces with application programs.\n>   - Uses TCP/IP protocol stack for communication.\n```",
  "27": "```markdown\n---\n*Slide 1*\n---\n\n# Electronic Mail\n\n- *One of the most popular Internet services is electronic mail (e-mail). The designers of the Internet probably never imagined the popularity of this application program.*\n```",
  "29": "```markdown\n---\n*Slide 1*\n---\n\n# Email Address\n\n- Components:\n    - Local part\n    - Domain name\n\n> *Visual Explanation:*\n> - The local part is the address of the mailbox on the mail server.\n> - The domain name is the domain name of the mail server.\n\n---\n*End of Document*\n---\n```",
  "28": "```markdown\n---\n*Slide 1*\n---\n\n# Format of Email\n\n- **Postal Mail:**\n  - Behrouz Forouzan\n  - De Anza College\n  - Cupertino, CA 96014\n  - Sophia Fegan\n  - Com-Net\n  - Cupertino, CA 95014\n\n- **Electronic Mail:**\n  - Mail From: forouzan@deanza.edu\n  - RCPT To: fegan@comnet.com\n\n> *Visual Explanation:*\n> - Diagram shows the structure of postal and electronic mail.\n> - Postal mail includes sender and recipient addresses.\n> - Electronic mail includes email addresses for sender and recipient.\n> - Both formats include a header and message body.\n\n> Note: The diagram illustrates the components of an envelope, header, and message in both postal and electronic formats.\n```",
  "24": "```markdown\n---\n*Slide [N]*\n---\n\n# Cont...\n\n| Code | Phrase                | Description                                                      |\n|------|-----------------------|------------------------------------------------------------------|\n| 301  | Moved permanently     | The requested URL is no longer used by the server.               |\n| 302  | Moved temporarily     | The requested URL has moved temporarily.                         |\n| 304  | Not modified          | The document has not been modified.                              |\n\n**Redirection**\n\n| 400  | Bad request           | There is a syntax error in the request.                          |\n| 401  | Unauthorized          | The request lacks proper authorization.                          |\n| 403  | Forbidden             | Service is denied.                                               |\n| 404  | Not found             | The document is not found.                                       |\n| 405  | Method not allowed    | The method is not supported in this URL.                         |\n| 406  | Not acceptable        | The format requested is not acceptable.                          |\n\n**Client Error**\n\n| 500  | Internal server error | There is an error, such as a crash, at the server site.          |\n| 501  | Not implemented       | The action requested cannot be performed.                        |\n| 503  | Service unavailable   | The service is temporarily unavailable, but may be requested in the future. |\n\n**Server Error**\n```"
}